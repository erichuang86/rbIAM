{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 When using Amazon Elastic Kubernetes Service ( EKS ) you will at some point ask yourself: how does AWS Identity and Access Management ( IAM ) and Kubernetes Role-based access control ( RBAC ) play together. Do they overlap? Are they complementary? What are the dependencies? rbIAM aims to help you navigate this space. If you want to learn more about the Why then read on here. For more background, peruse the terminology , and if you want to try it out yourself, check out the getting started guide now. Motivation \u00b6 For motivation, let's have a look at a concrete example, the Fluent Bit output plugin for Amazon Kinesis Data Firehose. In Centralized Container Logging with Fluent Bit we described the end-to-end setup and how to use it. Zooming in on one path, the log shipping in EKS, it looks as follows: The Fluent Bit plugin is deployed as a daemon set and in order to do its job: It depends on an IAM policy, defined in eks-fluent-bit-daemonset-policy.json , giving it the permissions to write to the Kinesis Data Firehose, manage log streams in CloudWatch, etc., as well as It depends on a Kubernetes role, defined in eks-fluent-bit-daemonset-rbac.yaml , giving it the permissions to list and query pods, so that it can receive the logs from the NGINX containers. Zooming in even further, focusing on the AWS and Kubernetes access control regimes in place, the relevant parts are: The Fluent Bit plugin has, through the Kubernetes RBAC settings in the pod-log-reader role, the permission to read the logs of the NGINX pods and, due to the fact that it is running on an EC2 instance with an AWS IAM role eksctl-fluent-bit-demo-nodegroup-ng-2fb6f1a-NodeInstanceRole-P6QXJ5EYS6 that has an inline policy attached, allowing it to write the log entries to a Kinesis Data Firehose delivery stream. For a finer-grained description of the many moving parts here, have a look at the terminology section, which defines the terms and explains the motivational example in detail. Use cases \u00b6 You want to use rbIAM for: Exploring a given permissions setup, for example, an existing deployment in Kubernetes, when using EKS. Find the necessary permissions for a desired setup, both for the IAM policies and the RBAC roles. Understand how AWS services, such as S3 or CloudWatch or Firehose interact with Kubernetes resources, such as pods, from an access control perspective. Look up what a given Kubernetes resource can or can not do, concerning AWS services. We expect that infra admins, devops roles, and also developers can benefit from rbIAM . In order to use the tool, we assume you're familiar with both AWS IAM and Kubernetes RBAC. If you want to brush up your knowledge, we recommend first having a look at the terminology section.","title":"Overview"},{"location":"#overview","text":"When using Amazon Elastic Kubernetes Service ( EKS ) you will at some point ask yourself: how does AWS Identity and Access Management ( IAM ) and Kubernetes Role-based access control ( RBAC ) play together. Do they overlap? Are they complementary? What are the dependencies? rbIAM aims to help you navigate this space. If you want to learn more about the Why then read on here. For more background, peruse the terminology , and if you want to try it out yourself, check out the getting started guide now.","title":"Overview"},{"location":"#motivation","text":"For motivation, let's have a look at a concrete example, the Fluent Bit output plugin for Amazon Kinesis Data Firehose. In Centralized Container Logging with Fluent Bit we described the end-to-end setup and how to use it. Zooming in on one path, the log shipping in EKS, it looks as follows: The Fluent Bit plugin is deployed as a daemon set and in order to do its job: It depends on an IAM policy, defined in eks-fluent-bit-daemonset-policy.json , giving it the permissions to write to the Kinesis Data Firehose, manage log streams in CloudWatch, etc., as well as It depends on a Kubernetes role, defined in eks-fluent-bit-daemonset-rbac.yaml , giving it the permissions to list and query pods, so that it can receive the logs from the NGINX containers. Zooming in even further, focusing on the AWS and Kubernetes access control regimes in place, the relevant parts are: The Fluent Bit plugin has, through the Kubernetes RBAC settings in the pod-log-reader role, the permission to read the logs of the NGINX pods and, due to the fact that it is running on an EC2 instance with an AWS IAM role eksctl-fluent-bit-demo-nodegroup-ng-2fb6f1a-NodeInstanceRole-P6QXJ5EYS6 that has an inline policy attached, allowing it to write the log entries to a Kinesis Data Firehose delivery stream. For a finer-grained description of the many moving parts here, have a look at the terminology section, which defines the terms and explains the motivational example in detail.","title":"Motivation"},{"location":"#use-cases","text":"You want to use rbIAM for: Exploring a given permissions setup, for example, an existing deployment in Kubernetes, when using EKS. Find the necessary permissions for a desired setup, both for the IAM policies and the RBAC roles. Understand how AWS services, such as S3 or CloudWatch or Firehose interact with Kubernetes resources, such as pods, from an access control perspective. Look up what a given Kubernetes resource can or can not do, concerning AWS services. We expect that infra admins, devops roles, and also developers can benefit from rbIAM . In order to use the tool, we assume you're familiar with both AWS IAM and Kubernetes RBAC. If you want to brush up your knowledge, we recommend first having a look at the terminology section.","title":"Use cases"},{"location":"getting-started/","text":"Getting Started \u00b6 This guide walks you through the setup and usage of rbIAM . Prerequisites \u00b6 In order for you to use rbIAM , the following must be true: You have credentials for AWS configured. You have access to an EKS cluster or in general an Kubernetes-on-AWS cluster. You have kubectl installed . Install \u00b6 Warning This tool is still WIP and currently the CLI binaries are available only for macOS and Linux platforms. Please raise an issue on GitHub if you're experiencing problems or something does not quite work like described in here. To install rbIAM , execute the following two commands. First, download the respective binary (here shown for macOS) like so: 1 curl -L https://github.com/mhausenblas/rbIAM/releases/latest/download/rbiam-macos -o /usr/local/bin/rbiam And then make it executable: 1 chmod +x /usr/local/bin/rbiam Tip For Linux install, simply replace the -macos part with -linux Alternatively, you can download the binaries from the releases page on GitHub. Usage \u00b6 The following lists the commands rbIAM supports and then walks you through an example usage, end-to-end. Commands \u00b6 The available commands in rbIAM v0.2 are: General: history \u2026 lists the history of selected items sync \u2026 synchronizes the local state with the remote one from IAM and Kubernetes help \u2026 lists available commands and provides usage tips quit \u2026 terminates the interactive session and quits the program For exploring AWS IAM: iam-user \u2026 allows you to describe the calling AWS IAM user details iam-roles \u2026 allows you to select an AWS IAM role and describe its details iam-policies \u2026 allows you to select an AWS IAM policy and describe its details For exploring Kubernetes RBAC: k8s-pods \u2026 allows you to select a Kubernetes pod and describe its details k8s-sa \u2026 allows you to select an Kubernetes service accounts and describe its details k8s-secrets \u2026 allows you to select a Kubernetes secret and describe its details Walkthrough \u00b6 In the following we do an end-to-end walkthrough, showing rbIAM in action. Launching & terminating \u00b6 After you launch the tool by typing rbiam in the shell of your choice, you should see something like this: On startup, rbiam queries both IAM and Kubernetes to get all the pertinent info, from the point of view of the authenticated user. This can take a couple of seconds, and if anything changes, for example you created a new secret in Kubernetes or attached a new policy to a role, you can use the sync command to manually trigger this process. Now, use the TAB key or \u2192 (right arrow key) to display the top-level menu: Note Select any of the commands by navigating with the TAB /\u2192 key or by start typing. When you start typing, only commands starting with said prefix are shown. For example, if you type iam , then the menu reduces to iam-user , iam-roles , and iam-policies . Once you're done, you want to terminate rbIAM . To do so, start typing q and auto-complete it with TAB so that the quit command appears and when hitting ENTER you then execute said command and terminate the program. Tip In order to clear the screen, you can hit CTRL+L . Now that we know how to launch and terminate rbIAM , let's look something up. Querying IAM user info \u00b6 To learn about the logged in AWS user and their caller identity, use the iam-user command: Above, we've hidden certain sensitive info but, naturally, when you execute the command you'll see the actual values. Exploring IAM roles & policies \u00b6 If you want to learn about AWS roles, use the iam-roles command. Once selected, you will see a list of IAM roles you can select from or start typing to filter down the list. For example, here we used eksctl to filter down the list to two entries and then selected one for exploration with ENTER : Tip In order to clear the term to the left of the cursor, you can hit CTRL+W . Further, lo learn about AWS policies, use the iam-policies command like so: Now that we've covered the IAM side of the house, let's move on to RBAC. Exploring Kubernetes pods \u00b6 Starting off with the app of interest, you want to find the Kubernetes pod hosting it. For this, use the k8s-pods command as follows: Now that we have the pod info, we can continue with the service account we found here, in this case, it's the one named fluent-bit . Exploring Kubernetes service accounts & secrets \u00b6 To explore Kubernetes service accounts and their secrets, use the k8s-sa and the k8s-secrets command, respectively. From the previous step we've gathered that for the Fluent Bit pod we're interested in the service account fluent-bit , so let's look this up along with its secret: Note Values in secrets are base64 encoded, however rbIAM automatically converts them into clear text so that you can directly copy & paste them. For example, in the case shown above, the value of ca.cert would be the actual content of the certificate. At any point you can use the history command to list the selected items in reverse chronological order. In our case this would be fluent-bit-token-5bwm6 , fluent-bit , and fluent-bit-cscsh .","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"This guide walks you through the setup and usage of rbIAM .","title":"Getting Started"},{"location":"getting-started/#prerequisites","text":"In order for you to use rbIAM , the following must be true: You have credentials for AWS configured. You have access to an EKS cluster or in general an Kubernetes-on-AWS cluster. You have kubectl installed .","title":"Prerequisites"},{"location":"getting-started/#install","text":"Warning This tool is still WIP and currently the CLI binaries are available only for macOS and Linux platforms. Please raise an issue on GitHub if you're experiencing problems or something does not quite work like described in here. To install rbIAM , execute the following two commands. First, download the respective binary (here shown for macOS) like so: 1 curl -L https://github.com/mhausenblas/rbIAM/releases/latest/download/rbiam-macos -o /usr/local/bin/rbiam And then make it executable: 1 chmod +x /usr/local/bin/rbiam Tip For Linux install, simply replace the -macos part with -linux Alternatively, you can download the binaries from the releases page on GitHub.","title":"Install"},{"location":"getting-started/#usage","text":"The following lists the commands rbIAM supports and then walks you through an example usage, end-to-end.","title":"Usage"},{"location":"getting-started/#commands","text":"The available commands in rbIAM v0.2 are: General: history \u2026 lists the history of selected items sync \u2026 synchronizes the local state with the remote one from IAM and Kubernetes help \u2026 lists available commands and provides usage tips quit \u2026 terminates the interactive session and quits the program For exploring AWS IAM: iam-user \u2026 allows you to describe the calling AWS IAM user details iam-roles \u2026 allows you to select an AWS IAM role and describe its details iam-policies \u2026 allows you to select an AWS IAM policy and describe its details For exploring Kubernetes RBAC: k8s-pods \u2026 allows you to select a Kubernetes pod and describe its details k8s-sa \u2026 allows you to select an Kubernetes service accounts and describe its details k8s-secrets \u2026 allows you to select a Kubernetes secret and describe its details","title":"Commands"},{"location":"getting-started/#walkthrough","text":"In the following we do an end-to-end walkthrough, showing rbIAM in action.","title":"Walkthrough"},{"location":"getting-started/#launching-terminating","text":"After you launch the tool by typing rbiam in the shell of your choice, you should see something like this: On startup, rbiam queries both IAM and Kubernetes to get all the pertinent info, from the point of view of the authenticated user. This can take a couple of seconds, and if anything changes, for example you created a new secret in Kubernetes or attached a new policy to a role, you can use the sync command to manually trigger this process. Now, use the TAB key or \u2192 (right arrow key) to display the top-level menu: Note Select any of the commands by navigating with the TAB /\u2192 key or by start typing. When you start typing, only commands starting with said prefix are shown. For example, if you type iam , then the menu reduces to iam-user , iam-roles , and iam-policies . Once you're done, you want to terminate rbIAM . To do so, start typing q and auto-complete it with TAB so that the quit command appears and when hitting ENTER you then execute said command and terminate the program. Tip In order to clear the screen, you can hit CTRL+L . Now that we know how to launch and terminate rbIAM , let's look something up.","title":"Launching &amp; terminating"},{"location":"getting-started/#markdown","text":"To learn about the logged in AWS user and their caller identity, use the iam-user command: Above, we've hidden certain sensitive info but, naturally, when you execute the command you'll see the actual values.","title":"IAM user info"},{"location":"getting-started/#markdown","text":"If you want to learn about AWS roles, use the iam-roles command. Once selected, you will see a list of IAM roles you can select from or start typing to filter down the list. For example, here we used eksctl to filter down the list to two entries and then selected one for exploration with ENTER : Tip In order to clear the term to the left of the cursor, you can hit CTRL+W . Further, lo learn about AWS policies, use the iam-policies command like so: Now that we've covered the IAM side of the house, let's move on to RBAC.","title":"IAM user info"},{"location":"getting-started/#markdown","text":"Starting off with the app of interest, you want to find the Kubernetes pod hosting it. For this, use the k8s-pods command as follows: Now that we have the pod info, we can continue with the service account we found here, in this case, it's the one named fluent-bit .","title":"IAM user info"},{"location":"getting-started/#markdown","text":"To explore Kubernetes service accounts and their secrets, use the k8s-sa and the k8s-secrets command, respectively. From the previous step we've gathered that for the Fluent Bit pod we're interested in the service account fluent-bit , so let's look this up along with its secret: Note Values in secrets are base64 encoded, however rbIAM automatically converts them into clear text so that you can directly copy & paste them. For example, in the case shown above, the value of ca.cert would be the actual content of the certificate. At any point you can use the history command to list the selected items in reverse chronological order. In our case this would be fluent-bit-token-5bwm6 , fluent-bit , and fluent-bit-cscsh .","title":"IAM user info"},{"location":"terminology/","text":"Terminology \u00b6 In the following we define the terms used in AWS IAM and Kubernetes RBAC using the motivational example to illustrate what each term means. AWS Identity and Access Management (IAM) \u00b6 Conceptually, AWS IAM looks as follows: the access an identity\u2014such as a user or role\u2014has concerning an AWS service or resource is determined through the attached policies that list allowed actions on resources. More formally, we're using the following terms: Principal An identity in AWS able to carry out an action offered by an AWS service (like listing EC2 instances) or able access a resource (such as reading from an S3 bucket). The identity can be an account root user , an IAM user , or a role . Role An identity that\u2014in contrast to an IAM user/root user, which are uniquely associated with a person\u2014is intended to be assumable by someone (person) or something (service). A role doesn't have long-term credentials, but rather, when assuming a role, temporary security credentials are provided, for the duration of a session. Policy A JSON document using the IAM policy language that either: defines allowed actions on resources (services) a role can use (permissions policy), or defines who is allowed to assume a role , in which case the trusted entity is included in the policy as the principal (trust policy). For example, for our Fluent Bit output plugin deployed as a DaemonSet in EKS, one of the IAM regimes looks as follows (compare: IAM policy used ): In a nutshell: the Fluent Bit output plugin, running in a container part of a pod that is running on an EC2 instance part of a node group with a role eksctl-fluent-bit-demo-nodegroup-ng-2fb6f1a-NodeInstanceRole-P6QXJ5EYS6 is permitted to perform the PutRecordBatch action in Firehose; in fact, with said policy, the Fluent Bit plugin is allowed to put records into any delivery stream, since the resource has not been limited to a specific one. Kubernetes Role-based Access Control (RBAC) \u00b6 Conceptually, Kubernetes RBAC looks as follows: the access an entity\u2014such as a user or service account\u2014has concerning a Kubernetes resource is determined through two indirections: roles (which define access rules) and role bindings (attaching or binding a role to an entity). More formally, we're using the following terms: Entity A user, group, or a Kubernetes service account . User A human being that is using Kubernetes, either via CLI tools such as kubectl , using the HTTP API of the API server, or indirectly, via cloud native apps. Service account Represents processes running in pods that wish to interact with the API server; a namespaced Kubernetes resource, representing the identity of an app. Resource A Kubernetes abstraction, representing operational aspects. Can be namespaced, for example a pod (co-scheduled containers), a service (east-west load balancer), or a deployment (pod supervisor for app life cycle management) or cluster-wide, such as nodes or namespaces themselves. Role Defines a set of strictly additive rules, representing a set of permissions. These permissions define what actions an entity is allowed to carry out with respect to a set of resources . Can be namespaced (then the role is only valid in the context of said namespace) or cluster-wide. Role binding Grants the permissions defined in a role to an entity . Can be namespaced (then the binding is only valid in the context of said namespace) or cluster-wide. Note that it is perfectly possible and even desirable to define a cluster-wide role and then use a (namespaced) role binding. This allows straight-forward re-use of roles across namespaces. For example, for our Fluent Bit output plugin deployed as a DaemonSet in EKS, the RBAC regime looks as follows (compare: role & role binding used ): In a nutshell: the Fluent Bit output plugin, using the default:fluent-bit service account, is permitted to read and list pods in the default namespace.","title":"Terminology"},{"location":"terminology/#terminology","text":"In the following we define the terms used in AWS IAM and Kubernetes RBAC using the motivational example to illustrate what each term means.","title":"Terminology"},{"location":"terminology/#markdown","text":"Conceptually, AWS IAM looks as follows: the access an identity\u2014such as a user or role\u2014has concerning an AWS service or resource is determined through the attached policies that list allowed actions on resources. More formally, we're using the following terms: Principal An identity in AWS able to carry out an action offered by an AWS service (like listing EC2 instances) or able access a resource (such as reading from an S3 bucket). The identity can be an account root user , an IAM user , or a role . Role An identity that\u2014in contrast to an IAM user/root user, which are uniquely associated with a person\u2014is intended to be assumable by someone (person) or something (service). A role doesn't have long-term credentials, but rather, when assuming a role, temporary security credentials are provided, for the duration of a session. Policy A JSON document using the IAM policy language that either: defines allowed actions on resources (services) a role can use (permissions policy), or defines who is allowed to assume a role , in which case the trusted entity is included in the policy as the principal (trust policy). For example, for our Fluent Bit output plugin deployed as a DaemonSet in EKS, one of the IAM regimes looks as follows (compare: IAM policy used ): In a nutshell: the Fluent Bit output plugin, running in a container part of a pod that is running on an EC2 instance part of a node group with a role eksctl-fluent-bit-demo-nodegroup-ng-2fb6f1a-NodeInstanceRole-P6QXJ5EYS6 is permitted to perform the PutRecordBatch action in Firehose; in fact, with said policy, the Fluent Bit plugin is allowed to put records into any delivery stream, since the resource has not been limited to a specific one.","title":"IAM terms"},{"location":"terminology/#markdown","text":"Conceptually, Kubernetes RBAC looks as follows: the access an entity\u2014such as a user or service account\u2014has concerning a Kubernetes resource is determined through two indirections: roles (which define access rules) and role bindings (attaching or binding a role to an entity). More formally, we're using the following terms: Entity A user, group, or a Kubernetes service account . User A human being that is using Kubernetes, either via CLI tools such as kubectl , using the HTTP API of the API server, or indirectly, via cloud native apps. Service account Represents processes running in pods that wish to interact with the API server; a namespaced Kubernetes resource, representing the identity of an app. Resource A Kubernetes abstraction, representing operational aspects. Can be namespaced, for example a pod (co-scheduled containers), a service (east-west load balancer), or a deployment (pod supervisor for app life cycle management) or cluster-wide, such as nodes or namespaces themselves. Role Defines a set of strictly additive rules, representing a set of permissions. These permissions define what actions an entity is allowed to carry out with respect to a set of resources . Can be namespaced (then the role is only valid in the context of said namespace) or cluster-wide. Role binding Grants the permissions defined in a role to an entity . Can be namespaced (then the binding is only valid in the context of said namespace) or cluster-wide. Note that it is perfectly possible and even desirable to define a cluster-wide role and then use a (namespaced) role binding. This allows straight-forward re-use of roles across namespaces. For example, for our Fluent Bit output plugin deployed as a DaemonSet in EKS, the RBAC regime looks as follows (compare: role & role binding used ): In a nutshell: the Fluent Bit output plugin, using the default:fluent-bit service account, is permitted to read and list pods in the default namespace.","title":"IAM terms"}]}