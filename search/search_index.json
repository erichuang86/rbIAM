{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 When using Amazon Elastic Kubernetes Service ( EKS ) you will at some point ask yourself: how does AWS Identity and Access Management ( IAM ) and Kubernetes Role-based access control ( RBAC ) play together. Do they overlap? Are they complementary? Are there dependencies. rbIAM aims to help you navigate this space. Motivation \u00b6 Let's have a look at a concrete example, for motivation. Take the Fluent Bit output plugin for Amazon Kinesis Data Firehose . In Centralized Container Logging with Fluent Bit we described how to use it. The setup, in a nutshell, is as follows: The Fluent Bit is deployed as a DaemonSet as per eks-fluent-bit-daemonset.yaml and: depends on an IAM policy, defined in eks-fluent-bit-daemonset-policy.json , giving it the permissions to write to the Kinesis Data Firehose, manage log streams in CloudWatch, etc., as well as a Kubernetes role, defined in eks-fluent-bit-daemonset-rbac.yaml , giving it the permissions to list and query pods and namespaces, in the cluster, so that it can receive the logs from the containers. Terminology \u00b6 IAM \u00b6 Principal An entity in AWS able to carry out an action and/or access a resource. The entity can be an account root user , an IAM user , or a role . Role An entity that, in contrast to an IAM user or root user which are uniquely associated with a person, is intended to be assumable by someone. A role does not have long-term credentials, but rather, when assuming a role, it provides you with temporary security credentials for the duration of a session. Policy A JSON document using the IAM policy language that either defines actions and resources a role can use (permissions policy) or define who is allowed to assume a role , in which case the trusted entity is included in the policy as the principal (trust policy). RBAC \u00b6 User A human being that is using Kubernetes, either via CLI tools such as kubectl , using the HTTP API of the API server, or via apps. Service account Represents processes running in pods that wish to interact with the API server. Role Defines a set of strictly additive rules, representing a set of permissions. Role binding Grants the permissions defined in a role to an entity (user, group, or service account). For example:","title":"Home"},{"location":"#overview","text":"When using Amazon Elastic Kubernetes Service ( EKS ) you will at some point ask yourself: how does AWS Identity and Access Management ( IAM ) and Kubernetes Role-based access control ( RBAC ) play together. Do they overlap? Are they complementary? Are there dependencies. rbIAM aims to help you navigate this space.","title":"Overview"},{"location":"#motivation","text":"Let's have a look at a concrete example, for motivation. Take the Fluent Bit output plugin for Amazon Kinesis Data Firehose . In Centralized Container Logging with Fluent Bit we described how to use it. The setup, in a nutshell, is as follows: The Fluent Bit is deployed as a DaemonSet as per eks-fluent-bit-daemonset.yaml and: depends on an IAM policy, defined in eks-fluent-bit-daemonset-policy.json , giving it the permissions to write to the Kinesis Data Firehose, manage log streams in CloudWatch, etc., as well as a Kubernetes role, defined in eks-fluent-bit-daemonset-rbac.yaml , giving it the permissions to list and query pods and namespaces, in the cluster, so that it can receive the logs from the containers.","title":"Motivation"},{"location":"#terminology","text":"","title":"Terminology"},{"location":"#iam","text":"Principal An entity in AWS able to carry out an action and/or access a resource. The entity can be an account root user , an IAM user , or a role . Role An entity that, in contrast to an IAM user or root user which are uniquely associated with a person, is intended to be assumable by someone. A role does not have long-term credentials, but rather, when assuming a role, it provides you with temporary security credentials for the duration of a session. Policy A JSON document using the IAM policy language that either defines actions and resources a role can use (permissions policy) or define who is allowed to assume a role , in which case the trusted entity is included in the policy as the principal (trust policy).","title":"IAM"},{"location":"#rbac","text":"User A human being that is using Kubernetes, either via CLI tools such as kubectl , using the HTTP API of the API server, or via apps. Service account Represents processes running in pods that wish to interact with the API server. Role Defines a set of strictly additive rules, representing a set of permissions. Role binding Grants the permissions defined in a role to an entity (user, group, or service account). For example:","title":"RBAC"}]}